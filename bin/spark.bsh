#!/bin/bash -e


function echo-error {
    echo ""
    echo "The spark didn't light the fire."
    echo ""
    echo "    $(tput setab 1)$(tput setaf 7) $1 $(tput sgr0)"
    echo ""
}

function echo-usage {
    echo "Usage: spark <command>"
    echo ""
    echo "where <command> is one of:"
    echo "    $(tput rev)dev$(tput sgr0), release, "
    echo "    shadow-watch, firebase-emulators, build-docs,"
    echo "    clean, npm-install, collect-spa-resources"
    echo ""
}



if [ $# -eq 0 ]
then
    echo-error "Missing argument."
    echo-usage
    exit 1
fi


###
### vars
###

PROJECT_DIR=$PWD
SPARK_DIR=$(realpath $PWD/../spark)

###
### helpers
###

function echo-task {
    echo ""
    echo "$(tput rev)[ spark: $1 ] $(tput sgr0)"
    echo ""
}


###
### npm-install
###

function clean {
    echo-task "clean"

    rm -rf target
    rm -rf .cpcache
    rm -rf .shadow-cljs
    rm -rf node_modules
    rm -rf firebase/public/*
    rm -rf firebase/functions/*.js
    rm -rf firebase/functions/node_modules

    rm -rf $SPARK_DIR/.cpcache
    rm -rf $SPARK_DIR/.shadow-cljs
}

if [ $1 = "clean" ]
then
    clean
    exit 0
fi


###
### npm-install
###

function npm-install {
    echo-task "npm-install"

    cd firebase/functions
    npm install

    cd ../..
    npm install
}

if [ $1 = "npm-install" ]
then
    npm-install
    exit 0
fi


###
### shadow-watch
###

function shadow-watch {
    echo-task "shadow-watch"

    mkdir -p target
    date -Iminutes > src/spa/version-time.txt
    gnome-terminal -t "Shadow-CLJS watch" -- clojure -A:shadow-cljs watch spa gcf
}

if [ $1 = "shadow-watch" ]
then
    shadow-watch
    exit 0
fi

###
### collect-spa-resources
###

function collect-spa-resources {
    echo-task "collect-spa-resources"

    mkdir -p firebase/public/js/
    cp -rv resources/spa/* firebase/public/

    if [ -e .spark/collect-spa-resources ]
    then
        .spark/collect-spa-resources
    fi

}

###
### firebase-emulators
###

function firebase-emulators {
    echo-task "firebase-emulators"
    collect-spa-resources
    cd firebase
    touch functions/index.js
    gnome-terminal -t "Firebase Emulators" -- firebase emulators:start --import=./dev-data --export-on-exit=./dev-data
    cd ..
}

if [ $1 = "firebase-emulators" ]
then
    firebase-emulators
    exit 0
fi


###
### dev
###

function assert-spark-exists {
    if [ ! -d $SPARK_DIR ]
    then
        echo-error "spark project does not exist: $SPARK_DIR"
        exit 1
    fi
}

if [ $1 = "dev" ]
then
    clean
    npm-install
    firebase-emulators
    shadow-watch
    exit 0
fi


###
### doc
###

DOC_SRC_DIR=dev-doc
DOC_DST_DIR=firebase/public/dev

function build-docs {
    echo-task "build-docs"
    asciidoctor -b html5 $DOC_SRC_DIR/main.adoc -o $DOC_DST_DIR/doc.html
}

if [ $1 = "build-docs" ]
then
    #generate-docs
    build-docs
    exit 0
fi

###
### release
###

function bump-version {
    echo-task "bump-version"

    VERSION=`cat src/spa/version.txt`
    VERSION=$((VERSION+1))
    echo "Bumping Version to $VERSION"
    echo $VERSION > src/spa/version.txt
    git add src/spa/version.txt
    git commit -m "[version bump] $VERSION"
    git push
}

function assert-git-clean {
    if [[ -n $(git status -s) ]]; then
        echo-error "git directory is dirty: $PWD"
        exit 1
    fi
}

function release {
    echo-task "release"

    VERSION=`cat src/spa/version.txt`

    sed -i -e "s/main\.js/main\.v${VERSION}\.js/g" firebase/public/index.html

    date -Iminutes > src/spa/version-time.txt

    mkdir -p target
    clojure -A:build-release --config-merge "{:release-version \"v"${VERSION}"\"}"

    bump-version

    if [ -f "./bin/deploy.bsh" ]
    then
        ./bin/deploy.bsh
    else
        cd firebase
        firebase deploy
        cd ..
    fi
}

if [ $1 = "release" ]
then
    assert-git-clean
    assert-spark-exists
    cd $SPARK_DIR
    assert-git-clean
    cd $PROJECT_DIR
    clean
    npm-install
    collect-spa-resources
    build-docs
    release
    exit 0
fi

###
### fallback
###


echo-error "Unsupported command: $1"
echo-usage
exit 1
